Ejecutable como documento HTML5
    con autor allnulled
    con nombre index
    con versión 0
<head>
    <title>Democracia 2.0</title>
    <meta charset="utf8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="js/calo.js"></script>
    <script src="js/democracia20-comunicador.js"></script>
    <style>
      .static_windows_1 {
        position: fixed; top: 0; bottom: 0; left: 0; right: 0;
        background-color: #0d293a;
      }
      .static_windows_2 {
        display: table;
        width: 100%;
        height: 100%;
      }
      .static_windows_3 {
        display: table-cell;
        width: 100%;
        height: 100%;
        text-align: center;
        vertical-align: middle;
      }
      .dialog_window_container_1 {
        display: inline-block;
        width: auto;
      }
      .dialog_window_container_2 {
        width: 100%;
      }
    </style>
    <style>

    .link {
      color: blue;
      cursor: pointer;
    }
    .link:hover {
      text-decoration: underline;
      text-shadow: 0 0 1px blue;
    }

    .MigasDePan {
      padding: 5px;
      border: 1px solid #333;
      box-shadow: 0 0 4px black;
      background-color: #E0E0E0;
    }
    .MigasDePan ul.estilo_migas_de_pan {
      margin: 0;
      padding: 0;
    }
    .MigasDePan ul.estilo_migas_de_pan > li {
      display: inline-block;
    }
    .MigasDePan ul.estilo_migas_de_pan > li > .link {}

    </style>
</head>
<body><div id="app"></div></body>.

creo democracia20 como una nueva window.Democracia20Comunicador(window.location.protocol + "//" + window.location.host).

creo MigasDePan como un componente vue2 con nombre "MigasDePan" con plantilla {
  <div class="MigasDePan Component">
    <ul class="estilo_migas_de_pan">
      <li v-for="(subseccion, subseccion_index) in seccion" v-bind:key="'miga_de_pan_' + subseccion_index">
        <span class="separador" v-if="subseccion_index !== 0"> » </span>
        <span class="link" v-if="typeof subseccion === 'string'" v-on:click="() => $router.history.push('/' + subseccion.toLowerCase())"> {{ subseccion }} </span>
        <span class="link" v-else-if="typeof subseccion === 'object'" v-on:click="() => $router.history.push(subseccion.link)"> {{ subseccion.nombre }} </span>
      </li>
    </ul>
  </div>
} con lógica donde {
  retorno {
    propiedad props como {
      app: {
        propiedad type como Object.
        propiedad required como true.
      },
      seccion: {
        propiedad type como Array.
        propiedad required como true.
      }
    }.
    método data donde {
      retorno {
        error: undefined,
        otros: {}
      }.
    }.
    propiedad methods como {
      mostrar_error: una función con (error) donde {
        asigno this.error como error.
        hago setTimeout(una lambda donde asigno this.error como undefined, 5000).
      }
    }.
  }.
}.

creo PaginaDeLogin como un componente vue2 con nombre "PaginaDeLogin" con plantilla {
  <div class="PaginaDeLogin Component">
    <div class="static_windows_1">
      <div class="static_windows_2">
        <div class="static_windows_3">
          <div class="dialog_window_container_1">
            <div class="dialog_window_container_2">
              <div class="window" style="text-align:left;">
                <div class="title-bar">
                  <div class="title-bar-text">Democracia 2.0</div>
                </div>
                <div class="window-body" style="position:relative;">
                  <table>
                    <tr style="">
                      <td class="width:100%;"><label>Nombre:</label></td>
                      <td><input type="text" v-model="nombre" /></td>
                    </tr>
                    <tr style="">
                      <td><label>Contraseña:</label></td>
                      <td><input type="password" v-model="contrasenya" /></td>
                    </tr>
                    <tr style="">
                      <td colspan="100">
                        <button style="width:100%;" v-on:click="() => autentificarse()">Entrar</button>
                      </td>
                    </tr>
                  </table>
                  <div v-if="error">
                    <div class="">{{ error.name }}: {{ error.message }}</div>
                  </div>
                </div>
                <div class="status-bar">
                  <div class="status-field"></div>
                  <div class="status-field" style="text-align: right; font-size:9px; white-space: nowrap;">Si no, puedes entrar como <a href="#" v-on:click="() => autentificarse_como_ciudadano_de_prueba()">ciudadano de prueba</a>.</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
} con lógica donde {
  retorno {
    propiedad props como {
      app: {
        propiedad type como Object.
        propiedad required como true.
      }
    }.
    método data donde {
      retorno {
        autenticacion: undefined,
        nombre: undefined,
        contrasenya: undefined,
        error: undefined,
        otros: {}
      }.
    }.
    propiedad methods como {
      mostrar_error: una función con (error) donde {
        asigno this.error como error.
        hago setTimeout(una lambda donde asigno this.error como undefined, 5000).
      },
      autentificarse: una función asíncrona donde {
        creo respuesta como asíncronamente democracia20.autentificarse(this.nombre, this.contrasenya).
        imprimo respuesta.
        asigno this.autenticacion como { nombre: this.nombre, contrasenya: this.contrasenya }.
      } en errores hago this.mostrar_error(error),
      autentificarse_como_ciudadano_de_prueba: una función asíncrona donde {
        asigno this.nombre como "administrador".
        asigno this.contrasenya como "admin-no-mucho".
        retorno this.autentificarse().
      } en errores hago this.mostrar_error(error)
    }.
    propiedad watch como {
      autenticacion: una función con (nuevo_valor) donde {
        asigno this.app.autenticacion como nuevo_valor.
      }
    }.
  }.
}.

creo PaginaDeInicio como un componente vue2 con nombre "PaginaDeInicio" con plantilla {
  <div class="PaginaDeInicio Component">
    <MigasDePan :app="app" :seccion="['🏛']" />
    <ul>
      <li>
        <span class="link_active">Inicio</span>
      </li>
      <li>
        <span class="link" v-on:click="() => $router.history.push('/votaciones')">Votaciones</span>
      </li>
      <li>
        <span class="link" v-on:click="() => $router.history.push('/problemas')">Problemas</span>
      </li>
      <li>
        <span class="link" v-on:click="() => $router.history.push('/soluciones')">Soluciones</span>
      </li>
      <li>
        <span class="link" v-on:click="() => $router.history.push('/implementaciones')">Implementaciones</span>
      </li>
    </ul>
  </div>
} con lógica donde {
  retorno {
    propiedad props como {
      app: {
        propiedad type como Object.
        propiedad required como true.
      }
    }.
    método data donde {
      retorno {
        error: undefined,
        otros: {}
      }.
    }.
    propiedad methods como {
      mostrar_error: una función con (error) donde {
        asigno this.error como error.
        hago setTimeout(una lambda donde asigno this.error como undefined, 5000).
      }
    }.
  }.
}.

creo PaginaDeVotaciones como un componente vue2 con nombre "PaginaDeVotaciones" con plantilla {
  <div class="PaginaDeVotaciones Component">
    <MigasDePan :app="app" :seccion="['🏛','Votaciones']" />
    <ul>
      <li>
        <span class="link" v-on:click="() => $router.history.push('/')">Volver</span>
      </li>
    </ul>
  </div>
} con lógica donde {
  retorno {
    propiedad props como {
      app: {
        propiedad type como Object.
        propiedad required como true.
      }
    }.
    método data donde {
      retorno {
        error: undefined,
        otros: {}
      }.
    }.
    propiedad methods como {
      mostrar_error: una función con (error) donde {
        asigno this.error como error.
        hago setTimeout(una lambda donde asigno this.error como undefined, 5000).
      }
    }.
  }.
}.

creo PaginaDeProblemas como un componente vue2 con nombre "PaginaDeProblemas" con plantilla {
  <div class="PaginaDeProblemas Component">
    <MigasDePan :app="app" :seccion="['🏛','Problemas']" />
    <ul>
      <li>
        <span class="link" v-on:click="() => $router.history.push('/')">Volver</span>
      </li>
    </ul>
  </div>
} con lógica donde {
  retorno {
    propiedad props como {
      app: {
        propiedad type como Object.
        propiedad required como true.
      }
    }.
    método data donde {
      retorno {
        error: undefined,
        otros: {}
      }.
    }.
    propiedad methods como {
      mostrar_error: una función con (error) donde {
        asigno this.error como error.
        hago setTimeout(una lambda donde asigno this.error como undefined, 5000).
      }
    }.
  }.
}.

creo PaginaDeSoluciones como un componente vue2 con nombre "PaginaDeSoluciones" con plantilla {
  <div class="PaginaDeSoluciones Component">
    <MigasDePan :app="app" :seccion="['🏛','Soluciones']" />
    <ul>
      <li>
        <span class="link" v-on:click="() => $router.history.push('/')">Volver</span>
      </li>
    </ul>
  </div>
} con lógica donde {
  retorno {
    propiedad props como {
      app: {
        propiedad type como Object.
        propiedad required como true.
      }
    }.
    método data donde {
      retorno {
        error: undefined,
        otros: {}
      }.
    }.
    propiedad methods como {
      mostrar_error: una función con (error) donde {
        asigno this.error como error.
        hago setTimeout(una lambda donde asigno this.error como undefined, 5000).
      }
    }.
  }.
}.

creo PaginaDeImplementaciones como un componente vue2 con nombre "PaginaDeImplementaciones" con plantilla {
  <div class="PaginaDeImplementaciones Component">
    <MigasDePan :app="app" :seccion="['🏛','Implementaciones']" />
    <ul>
      <li>
        <span class="link" v-on:click="() => $router.history.push('/')">Volver</span>
      </li>
    </ul>
  </div>
} con lógica donde {
  retorno {
    propiedad props como {
      app: {
        propiedad type como Object.
        propiedad required como true.
      }
    }.
    método data donde {
      retorno {
        error: undefined,
        otros: {}
      }.
    }.
    propiedad methods como {
      mostrar_error: una función con (error) donde {
        asigno this.error como error.
        hago setTimeout(una lambda donde asigno this.error como undefined, 5000).
      }
    }.
  }.
}.

creo App como una aplicación vue2 con nombre "App" con rutas [{
    propiedad path como "/login".
    propiedad name como "Login".
    propiedad component como PaginaDeLogin.
    propiedad props como {}.
},{
    propiedad path como "/".
    propiedad alias como "/🏛".
    propiedad name como "Inicio".
    propiedad component como PaginaDeInicio.
    propiedad props como {}.
},{
    propiedad path como "/votaciones".
    propiedad name como "PaginaDeVotaciones".
    propiedad component como PaginaDeVotaciones.
    propiedad props como {}.
},{
    propiedad path como "/problemas".
    propiedad name como "PaginaDeProblemas".
    propiedad component como PaginaDeProblemas.
    propiedad props como {}.
},{
    propiedad path como "/soluciones".
    propiedad name como "PaginaDeSoluciones".
    propiedad component como PaginaDeSoluciones.
    propiedad props como {}.
},{
    propiedad path como "/implementaciones".
    propiedad name como "PaginaDeImplementaciones".
    propiedad component como PaginaDeImplementaciones.
    propiedad props como {}.
}] con traducciones {
    propiedad es como {}.
    propiedad en como {}.
    propiedad ca como {}.
} con plantilla {
  <div class="App Component Castelog-app win7">
    <PaginaDeLogin :app="mismo" v-if="typeof autenticacion === 'undefined'" style="z-index: 9999;" />
    <div v-else>
      <router-view :app="mismo"></router-view>
    </div>
  </div>
} con estilos {
    html {}
    body {}
    .Component {}
    .App {}
} con lógica {
  retorno {
    método data donde {
      retorno {
        autenticacion: undefined,
        mismo: this
      }.
    }.
    propiedad methods como {}.
    propiedad watch como {}.
    método beforeMount donde {}.
    método mounted donde {}.
  }.
} montada en "#app".