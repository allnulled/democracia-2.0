creo Democracia20Cliente como una clase con {
    
    @Sección de método constructor de instancias:
    método constructor con (url_base) donde {
        asigno this.url_base como url_base.
    }.
    
    @Sección de método para mostrar error:
    método mostrar_error(error) donde {
        imprimo error.
    }.
    
    @Sección de método para crear URLs relativas al servidor de Democracia Directa 2.0:
    método crear_url con (...incluyo args) donde {
        creo variable salida como this.base_url.replace(una nueva RegExp("\\/$", "")).
        desde 0 hasta args.length {
            creo arg como args[index].
            incremento salida en "/" + arg.replace(una nueva RegExp("^\\/", "")).
        }.
        retorno salida.
    }.

    @Sección de método para autentificarse:
    método asíncrono autentificarse con (nombre, contrasenya) donde {
        compruebo que nombre es tipo texto.
        compruebo que contrasenya es tipo texto.
        creo resultado_1 como asíncronamente una petición http
            con url this.crear_url("/auth/entrar")
            con método "POST"
            con cuerpo { nombre, contrasenya }.
        retorno resultado_1.data.respuesta.datos.autentificacion.
    } en errores hago this.mostrar_error(error).
    
    @Sección de método para seleccionar datos:
    método asíncrono seleccionar_dato con (argumentos) donde {
        compruebo que argumentos es tipo objeto.
        compruebo que argumentos.tabla es tipo texto.
        creo resultado_1 como asíncronamente una petición http
            con url this.crear_url("/datos/seleccionar/dato")
            con método "POST"
            con cuerpo argumentos.
        retorno resultado_1.data.respuesta.datos.seleccion.
    } en errores hago this.mostrar_error(error).
    
    @Sección de método para insertar datos:
    método asíncrono insertar_dato con (argumentos) donde {
        compruebo que argumentos es tipo objeto.
        compruebo que argumentos.tabla es tipo texto.
        compruebo que argumentos.dato es tipo objeto.
        creo resultado_1 como asíncronamente una petición http
            con url this.crear_url("/datos/insertar/dato")
            con método "POST"
            con cuerpo argumentos.
        retorno resultado_1.data.respuesta.datos.insercion.
    } en errores hago this.mostrar_error(error).

    @Sección de método para actualizar datos:
    método asíncrono actualizar_dato con (argumentos) donde {
        compruebo que argumentos es tipo objeto.
        compruebo que argumentos.tabla es tipo texto.
        compruebo que argumentos.id es tipo número.
        compruebo que argumentos.dato es tipo objeto.
        creo resultado_1 como asíncronamente una petición http
            con url this.crear_url("/datos/actualizar/dato")
            con método "POST"
            con cuerpo argumentos.
        retorno resultado_1.data.respuesta.datos.actualizacion.
    } en errores hago this.mostrar_error(error).

    @Sección de método para eliminar datos:
    método asíncrono eliminar_dato con (argumentos) donde {
        compruebo que argumentos es tipo objeto.
        compruebo que argumentos.tabla es tipo texto.
        compruebo que argumentos.id es tipo número.
        creo resultado_1 como asíncronamente una petición http
            con url this.crear_url("/datos/eliminar/dato")
            con método "POST"
            con cuerpo argumentos.
        retorno resultado_1.data.respuesta.datos.eliminacion.
    } en errores hago this.mostrar_error(error).

}.